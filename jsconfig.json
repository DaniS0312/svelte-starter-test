{
    "compilerOptions": {
        "moduleResolution": "node",
        "target": "esnext",
        "module": "esnext",
        /**
         * svelte-preprocess cannot figure out whether you have
         * a value or a type, so tell TypeScript to enforce using
         * `import type` instead of `import` for Types.
         */
        "importsNotUsedAsValues": "error",
        "isolatedModules": true,
        "resolveJsonModule": true,
        /**
         * To have warnings / errors of the Svelte compiler at the
         * correct position, enable source maps by default.
         */
        "sourceMap": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "baseUrl": ".",
        /**
         * Typecheck JS in `.svelte` and `.js` files by default.
         * Disable this if you'd like to use dynamic types.
         */
        "checkJs": true,
        "paths": {
            "$src/*": ["src/*"],
            "$base_components/*": ["src/base_components/*"],
            "$assets/*": ["src/assets/*"],
            "$lib/*": ["src/lib/*"],
            "$navigation/*": ["src/lib/navigation/*"],
            "$utilities/*": ["src/lib/js/utilities/*"],
            "$stores/*": ["src/lib/js/stores/*"]
        }
    },
    /**
     * Use global.d.ts instead of compilerOptions.types
     * to avoid limiting type declarations.
     */
    "include": ["src/**/*.d.ts", "src/**/*.js", "src/**/*.svelte"]
}
